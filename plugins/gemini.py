from pyrogram.types import Message
from pyrogram.enums import ChatAction
from pyrogram import Client, filters
import requests
import asyncio
from Alex.utils.database import get_fsub # Assuming database functions (like FSUB, get_fsub) are defined here
import aiohttp
from Alex import app



# Generate a detailed prompt for image creation
def generate_long_query(query):
    return f"{query}."

@app.on_message(filters.command("draw"))
async def draw_image(client, message):
    if len(message.command) < 2:
        await message.reply_text("·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä «´·¥ú·¥á Ä è ·¥õ·¥è …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á ·¥Ä…¥ …™·¥ç·¥Ä…¢·¥á.")
        return

    # Generate a long query for better image results
    user_query = message.text.split(" ", 1)[1]
    query = generate_long_query(user_query)

    # Send initial message
    wait_message = await message.reply_text("<b>…¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢ …™·¥ç·¥Ä…¢·¥á, ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ . . .</b>")

    # Asynchronous request using aiohttp
    url = f"https://text2img.codesearch.workers.dev/?prompt={query}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    image_data = await response.json()
                    if "imageUrl" in image_data:
                        image_url = image_data["imageUrl"]
                        await wait_message.delete()  # Delete wait message
                        await message.reply_photo(photo=image_url, caption=f"<b>Generated Image for:</b> {user_query}")
                    else:
                        await wait_message.edit_text("…¥·¥è …™·¥ç·¥Ä…¢·¥ás ·¥°·¥á Ä·¥á  Ä·¥á·¥õ·¥ú Ä…¥·¥á·¥Ö. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.")
                else:
                    await wait_message.edit_text("<b>·¥á Ä Ä·¥è Ä:</b> ·¥ú…¥·¥Ä ô ü·¥á ·¥õ·¥è …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á …™·¥ç·¥Ä…¢·¥á ·¥Ä·¥õ ·¥õ ú…™s ·¥õ…™·¥ç·¥á. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è  ü·¥Ä·¥õ·¥á Ä.")
    except Exception as e:
        # Try to edit or delete the message only if it exists
        try:
            await wait_message.edit_text(f"·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö: {e}")
        except Exception:
            await message.reply_text(f"·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö: {e}")



BASE_URL = "https://chatwithai.codesearch.workers.dev/?chat="

def ask_query(query: str) -> str:
    try:
        # Send GET request to the API
        response = requests.get(f"{BASE_URL}{query}")
        response.raise_for_status()
        # Parse JSON response
        data = response.json()  # Convert the response to a JSON object
        # Extract and return the "data" field if present
        return data.get("data", "‚ö†Ô∏è Error: Unexpected response format")
    except requests.exceptions.RequestException as e:
        return f"<b>·¥á Ä Ä·¥è Ä:</b> {str(e)}"
    except json.JSONDecodeError:
        return "<b>·¥á Ä Ä·¥è Ä:</b> “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ö·¥á·¥Ñ·¥è·¥Ö·¥á ·¥õ ú·¥á  Ä·¥ás·¥ò·¥è…¥s·¥á “ì Ä·¥è·¥ç ·¥õ ú·¥á s·¥á Ä·¥†·¥á Ä."

async def send_typing_action(client: Client, chat_id: int, duration: int = 1):
    await client.send_chat_action(chat_id, ChatAction.TYPING)
    await asyncio.sleep(duration)

@app.on_message(filters.command(["ai", "ask", "gemini"], prefixes=[".", "!", "/", ""]))
async def ask_query_command(client: Client, message: Message):
    if FSUB and not await get_fsub(client, message):
        return
    query = message.text.split(" ", 1)
    if len(query) > 1:
        await send_typing_action(client, message.chat.id)
        reply = ask_query(query[1])
        await message.reply_text(f"{message.from_user.mention}, {reply} üöÄ")
    else:
        await message.reply_text("·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä «´·¥ú·¥á Ä è ·¥õ·¥è ·¥Äs·¥ã <b>…¢·¥ò·¥õ-ùü∫</b>. ·¥Ö·¥è…¥'·¥õ  ô·¥á s ú è,  ü·¥á·¥õ's ·¥Ñ ú·¥Ä·¥õ!")

@app.on_message(filters.mentioned & filters.group)
async def handle_mention(client: Client, message: Message):
    if FSUB and not await get_fsub(client, message):
        return
    user_text = (
        message.reply_to_message.text.strip()
        if message.reply_to_message
        else message.text.split(" ", 1)[1].strip()
        if len(message.text.split(" ", 1)) > 1
        else ""
    )
    if user_text:
        await send_typing_action(client, message.chat.id)
        reply = ask_query(user_text)
        await message.reply_text(f"{message.from_user.mention}, {reply} üöÄ")
    else:
        await message.reply("·¥ò ü·¥á·¥Äs·¥á ·¥Äs·¥ã ·¥Ä «´·¥ú·¥ás·¥õ…™·¥è…¥ ·¥Ä“ì·¥õ·¥á Ä ·¥ç·¥á…¥·¥õ…™·¥è…¥…™…¥…¢ ·¥ç·¥á! …™'·¥ç  ú·¥á Ä·¥á ·¥õ·¥è  ú·¥á ü·¥ò!")